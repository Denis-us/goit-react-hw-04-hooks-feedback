{"version":3,"sources":["components/Statistics/Statistics.js","components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","FeedbackOptions","options","onLeaveFeedback","map","option","onClick","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","prevGood","prevNeutral","prevBad","defaultProps","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAGe,SAASA,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,gCACE,4CAEA,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KAEV,yCAAYC,KACZ,qDAAwBC,EAAxB,UCjBS,SAASC,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,oCACGD,GAAS,6BAAKA,IACdC,KCHQ,SAASC,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACjD,OACE,6BACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBAAqBC,QAAS,kBAAMH,EAAgBE,IAApD,SACGA,GADUA,QCJN,SAASE,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,4BAAIA,ICEE,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOjB,EAAP,KAAakB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOhB,EAAP,KAAgBkB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOf,EAAP,KAAYkB,EAAZ,KAyBMC,EAAqB,WACzB,OAAOrB,EAAOC,EAAUC,GAG1B,OACE,qCACE,cAACG,EAAD,CAASC,MAAO,wBAAhB,SACE,cAACE,EAAD,CACEC,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAhCgB,SAACE,GACvB,OAAQA,GACN,IAAK,OACHM,GAAQ,SAACI,GAAD,OAAcA,EAAW,KACjC,MACF,IAAK,UACHH,GAAW,SAACI,GAAD,OAAiBA,EAAc,KAC1C,MACF,IAAK,MACHH,GAAO,SAACI,GAAD,OAAaA,EAAU,KAC9B,MACF,QACE,aAwBF,cAACnB,EAAD,CAASC,MAAO,aAAhB,SACGe,IACC,cAACtB,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOkB,IACPjB,mBA1BiBJ,MACAC,EAAUC,IAEiC,MA0B9D,cAACY,EAAD,CAAcC,QAAS,2BJjCjChB,EAAW0B,aAAe,CACxBtB,MAAO,GACPC,mBAAoB,IK1BtB,IAYesB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACrB,EAAD,MAEFsB,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.eb76f2cd.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function Statistics({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n}) {\n  return (\n    <div>\n      <ul>Statistics</ul>\n\n      <li>Good: {good}</li>\n      <li>Neutral: {neutral}</li>\n      <li>Bad: {bad}</li>\n\n      <li>Total: {total}</li>\n      <li>Positive feedback: {positivePercentage}%</li>\n    </div>\n  );\n}\n\nStatistics.defaultProps = {\n  total: \"\",\n  positivePercentage: \"\",\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n};\n","import React from \"react\";\n\nexport default function Section({ title, children }) {\n  return (\n    <section>\n      {title && <h2>{title}</h2>}\n      {children}\n    </section>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <ul>\n      {options.map((option) => (\n        <button key={option} onClick={() => onLeaveFeedback(option)}>\n          {option}\n        </button>\n      ))}\n    </ul>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.string.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function Notification({ message }) {\n  return <p>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import { useState } from \"react\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport Section from \"./components/Section/Section\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Notification from \"./components/Notification/Notification\";\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onLeaveFeedback = (option) => {\n    switch (option) {\n      case \"good\":\n        setGood((prevGood) => prevGood + 1);\n        break;\n      case \"neutral\":\n        setNeutral((prevNeutral) => prevNeutral + 1);\n        break;\n      case \"bad\":\n        setBad((prevBad) => prevBad + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const positiveFeedbackPercentage = () => {\n    const positiveFeedback = good;\n    const negativeFeedback = neutral + bad;\n\n    return (positiveFeedback / (positiveFeedback + negativeFeedback)) * 100;\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  return (\n    <>\n      <Section title={\"Please leave feedback\"}>\n        <FeedbackOptions\n          options={[\"good\", \"neutral\", \"bad\"]}\n          onLeaveFeedback={onLeaveFeedback}\n        />\n      </Section>\n\n      <Section title={\"Statistics\"}>\n        {countTotalFeedback() ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={positiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message={\"No feedback given\"}></Notification>\n        )}\n      </Section>\n    </>\n  );\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}